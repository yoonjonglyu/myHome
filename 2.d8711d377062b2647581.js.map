{"version":3,"sources":["webpack:///./src/lib/custom/post.ts","webpack:///./src/components/postList.tsx"],"names":["postList","state","PostList","dispatch","getPostList","type","getPostListByTag","idx","postContents","PostContents","post","getPostContents","ContentsItem","div","PostLink","MetaText","span","Headline","h2","SubText","p","props","tab","tag","setTag","location","hash","split","isTag","tabIndex","watchTag","setInterval","clearInterval","List","length","map","key","to","postIdx","className","dateTime","postDate","postAuthor","postTitle","postDescription","style","textAlign"],"mappings":"0FAAA,uFAMA,SAASA,IACL,MAAM,SAAEA,GAAa,YAAaC,IAAqB,CACnDD,SAAUC,EAAMC,SAASA,YAGvBC,EAAW,cAQjB,MAAO,CAAEH,WAAUI,YAPEC,IACjBF,EAAS,IAAqBE,KAMFC,iBAJP,CAACD,EAAcE,KACpCJ,EAAS,IAA0BE,EAAME,MAKjD,SAASC,IACL,MAAM,aAAEA,GAAiB,YAAaP,IAAqB,CACvDO,aAAcP,EAAMQ,aAAaC,QAG/BP,EAAW,cAKjB,MAAO,CAAEK,eAAcG,gBAJC,CAACN,EAAcE,KACnCJ,EAAS,IAAyBE,EAAME,Q,iCC5BhD,6DAmBA,MAAMK,EAAe,IAAOC,GAAG;;;EAIzBC,EAAW,YAAO,IAAK;;;EAIvBC,EAAW,IAAOC,IAAI;;;EAItBC,EAAW,IAAOC,EAAE;;EAGpBC,EAAU,IAAOC,CAAC;;;EA0DT,UArD2B,SAAUC,G,MAChD,QACIA,EACEX,EAAO,cACPY,EAAM,eACLC,EAAKC,GAAU,mBAAoC,QAA5B,EAACC,SAASC,KAAKC,MAAM,KAAK,UAAE,eAAEA,MAAM,KAAK,IAEvE,oBAAU,K,MACN,MAAMC,EAAmC,QAA9B,EAAGH,SAASC,KAAKC,MAAM,KAAK,UAAE,eAAEA,MAAM,KACjD,OAAQL,EAAIO,UACR,KAAK,EACc,UAAfD,aAAK,EAALA,EAAQ,IAAgBlB,EAAKJ,iBAAiB,QAASsB,EAAM,IAAMlB,EAAKN,YAAY,SACpF,MACJ,KAAK,EACc,UAAfwB,aAAK,EAALA,EAAQ,IAAgBlB,EAAKJ,iBAAiB,OAAQsB,EAAM,IAAMlB,EAAKN,YAAY,QACnF,MACJ,KAAK,EACc,UAAfwB,aAAK,EAALA,EAAQ,IAAgBlB,EAAKJ,iBAAiB,YAAasB,EAAM,IAAMlB,EAAKN,YAAY,aAMhG,MAAM0B,EAAWC,YAAY,K,QACrBR,KAAmC,QAAhC,EAAKE,SAASC,KAAKC,MAAM,KAAK,UAAE,eAAEA,MAAM,KAAK,KAChDH,EAAkC,QAA5B,EAACC,SAASC,KAAKC,MAAM,KAAK,UAAE,eAAEA,MAAM,KAAK,MAIvD,MAAO,KAAQK,cAAcF,KAC9B,CAACR,EAAIO,SAAUN,IAElB,MAAMU,EAAOvB,EAAKV,SAASkC,OAAS,EAAIxB,EAAKV,SAASmC,IAAI,CAACzB,EAAM0B,IAEzD,kBAACxB,EAAY,CAACwB,IAAKA,GACf,kBAACtB,EAAQ,CAACuB,GAAI,SAAS3B,EAAK4B,SACxB,kBAACvB,EAAQ,CAACwB,UAAU,aAAY,0BAAMC,SAAU9B,EAAK+B,UAAW/B,EAAK+B,U,IAAkB/B,EAAKgC,YAC5F,kBAACzB,EAAQ,CAACsB,UAAU,cAAc7B,EAAKiC,WACvC,kBAACxB,EAAO,CAACoB,UAAU,oBACd7B,EAAKkC,oBAKpB,kBAAChC,EAAY,K,IAAE,kBAACK,EAAQ,CAAC4B,MAAO,CAAEC,UAAW,WAAU,2B,KAE7D,OACI,yBAAKP,UAAU,aACVN","file":"2.d8711d377062b2647581.js","sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RootState } from '../../store/reducers';\r\n\r\nimport * as Actions from '../../store/actions';\r\n\r\nfunction postList() {\r\n    const { postList } = useSelector((state: RootState) => ({\r\n        postList: state.PostList.PostList\r\n    }));\r\n\r\n    const dispatch = useDispatch();\r\n    const getPostList = (type: string) => {\r\n        dispatch(Actions.LOADPOSTLIST(type));\r\n    }\r\n    const getPostListByTag = (type: string, idx: string) => {\r\n        dispatch(Actions.LOADPOSTLISTBYTAG(type, idx));\r\n    }\r\n\r\n    return { postList, getPostList, getPostListByTag };\r\n}\r\nfunction postContents() {\r\n    const { postContents } = useSelector((state: RootState) => ({\r\n        postContents: state.PostContents.post\r\n    }));\r\n\r\n    const dispatch = useDispatch();\r\n    const getPostContents = (type: string, idx: string) => {\r\n        dispatch(Actions.LOADPOSTCONTENTS(type, idx));\r\n    }\r\n\r\n    return { postContents, getPostContents }\r\n}\r\n\r\n\r\nexport { postList, postContents }","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Styled from 'styled-components';\r\n\r\nimport { postList } from '../lib/custom/post';\r\nimport { tabIndex } from '../lib/custom/tag';\r\n\r\ninterface PostListProps {\r\n\r\n}\r\ninterface PostProps {\r\n    postIdx: number\r\n    postDate: string\r\n    postAuthor: string\r\n    postTitle: string\r\n    postDescription: string\r\n    postTags: Array<{ idx: number, name: string }>\r\n}\r\n\r\nconst ContentsItem = Styled.div`\r\n    padding : 30px 0;\r\n    border-bottom : 1px solid #dbe2ef;\r\n`;\r\nconst PostLink = Styled(Link)`\r\n    text-decoration : none;\r\n    color : unset;\r\n`;\r\nconst MetaText = Styled.span`\r\n    font-size : 0.9rem;\r\n    color : gray;\r\n`;\r\nconst Headline = Styled.h2`\r\n    font-size : 2rem;\r\n`;\r\nconst SubText = Styled.p`\r\n    font-size : 1rem;\r\n    color : #0f4c75;\r\n`;\r\n\r\nconst PostList: React.FC<PostListProps> = function (props) {\r\n    const {\r\n    } = props;\r\n    const post = postList();\r\n    const tab = tabIndex();\r\n    const [tag, setTag] = useState(location.hash.split(\"?\")[1]?.split(\"=\")[1]);\r\n\r\n    useEffect(() => {\r\n        const isTag = location.hash.split(\"?\")[1]?.split(\"=\");\r\n        switch (tab.tabIndex) {\r\n            case 2:\r\n                isTag?.[0] === \"tags\" ? post.getPostListByTag(\"essay\", isTag[1]) : post.getPostList(\"essay\");\r\n                break;\r\n            case 3:\r\n                isTag?.[0] === \"tags\" ? post.getPostListByTag(\"tech\", isTag[1]) : post.getPostList(\"tech\");\r\n                break;\r\n            case 4:\r\n                isTag?.[0] === \"tags\" ? post.getPostListByTag(\"portfolio\", isTag[1]) : post.getPostList(\"portfolio\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const watchTag = setInterval(() => { // 커스텀 훅으로 모두 묶어서 각 이벤트마다 해당 훅을 실행시킨다면 이렇게 인터벌 할 필요도 없겠지\r\n            if (tag !== location.hash.split(\"?\")[1]?.split(\"=\")[1]) {\r\n                setTag(location.hash.split(\"?\")[1]?.split(\"=\")[1]);\r\n            }\r\n        });\r\n\r\n        return () => { clearInterval(watchTag) };\r\n    }, [tab.tabIndex, tag]);\r\n\r\n    const List = post.postList.length > 0 ? post.postList.map((post, key) => {\r\n        return (\r\n            <ContentsItem key={key}>\r\n                <PostLink to={`?post=${post.postIdx}`}>\r\n                    <MetaText className=\"post-meta\"><time dateTime={post.postDate}>{post.postDate}</time> {post.postAuthor}</MetaText>\r\n                    <Headline className=\"post-title\">{post.postTitle}</Headline>\r\n                    <SubText className=\"post-description\">\r\n                        {post.postDescription}\r\n                    </SubText>\r\n                </PostLink>\r\n            </ContentsItem>\r\n        );\r\n    }) : (<ContentsItem> <Headline style={{ textAlign: 'center' }}>원하시는 조건에 해당 하는 글이 없습니다.</Headline> </ContentsItem>); // 나중에 꾸미자\r\n\r\n    return (\r\n        <div className=\"post-list\">\r\n            {List}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList"],"sourceRoot":""}