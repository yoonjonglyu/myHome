{"version":3,"sources":["webpack:///./src/lib/custom/post.ts","webpack:///./src/components/ui/organisms/postList.tsx"],"names":["postList","state","PostList","dispatch","getPostList","type","getPostListByTag","idx","postContents","PostContents","post","getPostContents","ContentsItem","div","PostLink","MetaText","span","Headline","h2","SubText","p","props","tab","tags","setTags","location","hash","split","console","log","queryString","URLSearchParams","tabIndex","isTag","getTag","has","get","result","List","length","map","key","to","postIdx","className","dateTime","postDate","postAuthor","postTitle","postDescription","style","textAlign"],"mappings":"0FAAA,uFAMA,SAASA,IACL,MAAM,SAAEA,GAAa,YAAaC,IAAqB,CACnDD,SAAUC,EAAMC,SAASA,YAGvBC,EAAW,cAQjB,MAAO,CAAEH,WAAUI,YAPEC,IACjBF,EAAS,IAAqBE,KAMFC,iBAJP,CAACD,EAAcE,KACpCJ,EAAS,IAA0BE,EAAME,MAKjD,SAASC,IACL,MAAM,aAAEA,GAAiB,YAAaP,IAAqB,CACvDO,aAAcP,EAAMQ,aAAaC,QAG/BP,EAAW,cAKjB,MAAO,CAAEK,eAAcG,gBAJC,CAACN,EAAcE,KACnCJ,EAAS,IAAyBE,EAAME,Q,iCC5BhD,sGAmBA,MAAMK,EAAe,IAAOC,GAAG;;;EAIzBC,EAAW,YAAO,IAAK;;;EAIvBC,EAAW,IAAOC,IAAI;;;EAItBC,EAAW,IAAOC,EAAE;;EAGpBC,EAAU,IAAOC,CAAC;;;EAKlBlB,EAAoC,SAAUmB,GAChD,MAAMX,EAAO,cACPY,EAAM,eACLC,EAAMC,GAAW,mBAASC,SAASC,KAAKC,MAAM,KAAK,IAC1D,oBAAU,KACNC,QAAQC,IAAIN,GACRA,IAASE,SAASC,KAAKC,MAAM,KAAK,IAAIH,EAAQC,SAASC,KAAKC,MAAM,KAAK,MAE/E,oBAAU,KACN,MAAMG,EAAc,IAAIC,gBAAgBR,GACxC,OAAQD,EAAIU,UACR,KAAK,EACDC,IAAUvB,EAAKJ,iBAAiB,QAAS4B,KAAYxB,EAAKN,YAAY,SACtE,MACJ,KAAK,EACD6B,IAAUvB,EAAKJ,iBAAiB,OAAQ4B,KAAYxB,EAAKN,YAAY,QACrE,MACJ,KAAK,EACD6B,IAAUvB,EAAKJ,iBAAiB,YAAa4B,KAAYxB,EAAKN,YAAY,aAMlF,SAAS6B,IACL,OAAOH,EAAYK,IAAI,SAAuC,OAA5BL,EAAYM,IAAI,QAEtD,SAASF,IACL,MAAMG,EAASP,EAAYM,IAAI,QAC/B,OAAe,OAAXC,EACOA,EAEA,KAGhB,CAACf,EAAIU,SAAUT,IAElB,MAAMe,EAAO5B,EAAKV,SAASuC,OAAS,EAAI7B,EAAKV,SAASwC,IAAI,CAAC9B,EAAM+B,IAEzD,kBAAC7B,EAAY,CAAC6B,IAAKA,GACf,kBAAC3B,EAAQ,CAAC4B,GAAI,SAAShC,EAAKiC,SACxB,kBAAC5B,EAAQ,CAAC6B,UAAU,aAAY,0BAAMC,SAAUnC,EAAKoC,UAAWpC,EAAKoC,U,IAAkBpC,EAAKqC,YAC5F,kBAAC9B,EAAQ,CAAC2B,UAAU,cAAclC,EAAKsC,WACvC,kBAAC7B,EAAO,CAACyB,UAAU,oBACdlC,EAAKuC,oBAKpB,kBAACrC,EAAY,K,IAAE,kBAACK,EAAQ,CAACiC,MAAO,CAAEC,UAAW,WAAU,2B,KAE7D,OACI,yBAAKP,UAAU,aACVN","file":"3.c3d9885f4d9ab9560168.js","sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RootState } from '../../store/reducers';\r\n\r\nimport * as Actions from '../../store/actions';\r\n\r\nfunction postList() {\r\n    const { postList } = useSelector((state: RootState) => ({\r\n        postList: state.PostList.PostList\r\n    }));\r\n\r\n    const dispatch = useDispatch();\r\n    const getPostList = (type: string) => {\r\n        dispatch(Actions.LOADPOSTLIST(type));\r\n    }\r\n    const getPostListByTag = (type: string, idx: string) => {\r\n        dispatch(Actions.LOADPOSTLISTBYTAG(type, idx));\r\n    }\r\n\r\n    return { postList, getPostList, getPostListByTag };\r\n}\r\nfunction postContents() {\r\n    const { postContents } = useSelector((state: RootState) => ({\r\n        postContents: state.PostContents.post\r\n    }));\r\n\r\n    const dispatch = useDispatch();\r\n    const getPostContents = (type: string, idx: string) => {\r\n        dispatch(Actions.LOADPOSTCONTENTS(type, idx));\r\n    }\r\n\r\n    return { postContents, getPostContents }\r\n}\r\n\r\n\r\nexport { postList, postContents }","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Styled from 'styled-components';\r\n\r\nimport { postList } from '../../../lib/custom/post';\r\nimport { tabIndex } from '../../../lib/custom/tag';\r\n\r\ninterface PostListProps {\r\n\r\n}\r\ninterface PostProps {\r\n    postIdx: number\r\n    postDate: string\r\n    postAuthor: string\r\n    postTitle: string\r\n    postDescription: string\r\n    postTags: Array<{ idx: number, name: string }>\r\n}\r\n\r\nconst ContentsItem = Styled.div`\r\n    padding : 30px 0;\r\n    border-bottom : 1px solid #dbe2ef;\r\n`;\r\nconst PostLink = Styled(Link)`\r\n    text-decoration : none;\r\n    color : unset;\r\n`;\r\nconst MetaText = Styled.span`\r\n    font-size : 0.9rem;\r\n    color : gray;\r\n`;\r\nconst Headline = Styled.h2`\r\n    font-size : 2rem;\r\n`;\r\nconst SubText = Styled.p`\r\n    font-size : 1rem;\r\n    color : #0f4c75;\r\n`;\r\n\r\nconst PostList: React.FC<PostListProps> = function (props) {\r\n    const post = postList();\r\n    const tab = tabIndex();\r\n    const [tags, setTags] = useState(location.hash.split(\"?\")[1]);\r\n    useEffect(() => {\r\n        console.log(tags);\r\n        if (tags !== location.hash.split(\"?\")[1]) setTags(location.hash.split(\"?\")[1]);\r\n    });\r\n    useEffect(() => {\r\n        const queryString = new URLSearchParams(tags);\r\n        switch (tab.tabIndex) {\r\n            case 2:\r\n                isTag() ? post.getPostListByTag(\"essay\", getTag()) : post.getPostList(\"essay\");\r\n                break;\r\n            case 3:\r\n                isTag() ? post.getPostListByTag(\"tech\", getTag()) : post.getPostList(\"tech\");\r\n                break;\r\n            case 4:\r\n                isTag() ? post.getPostListByTag(\"portfolio\", getTag()) : post.getPostList(\"portfolio\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        function isTag() {\r\n            return queryString.has(\"tags\") && queryString.get(\"tags\") !== null;\r\n        }\r\n        function getTag() {\r\n            const result = queryString.get(\"tags\");\r\n            if (result !== null) {\r\n                return result;\r\n            } else {\r\n                return '';\r\n            }\r\n        }\r\n    }, [tab.tabIndex, tags]);\r\n\r\n    const List = post.postList.length > 0 ? post.postList.map((post, key) => {\r\n        return (\r\n            <ContentsItem key={key}>\r\n                <PostLink to={`?post=${post.postIdx}`}>\r\n                    <MetaText className=\"post-meta\"><time dateTime={post.postDate}>{post.postDate}</time> {post.postAuthor}</MetaText>\r\n                    <Headline className=\"post-title\">{post.postTitle}</Headline>\r\n                    <SubText className=\"post-description\">\r\n                        {post.postDescription}\r\n                    </SubText>\r\n                </PostLink>\r\n            </ContentsItem>\r\n        );\r\n    }) : (<ContentsItem> <Headline style={{ textAlign: 'center' }}>원하시는 조건에 해당 하는 글이 없습니다.</Headline> </ContentsItem>); // 나중에 꾸미자\r\n\r\n    return (\r\n        <div className=\"post-list\">\r\n            {List}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { PostList, PostListProps }"],"sourceRoot":""}